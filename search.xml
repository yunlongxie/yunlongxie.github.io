<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql基础</title>
      <link href="/2023/09/16/mysql-ji-chu/"/>
      <url>/2023/09/16/mysql-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql基础"><a href="#Mysql基础" class="headerlink" title="Mysql基础"></a>Mysql基础</h1><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库表对象（数据库，表，字段）</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库</p><pre class=" language-mysql"><code class="language-mysql">SHOW DATABASES;</code></pre><p>查询当前数据库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>创建</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 数据库名 <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> 字符集<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">COLLATE</span> 排序规则<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>删除</p><pre class=" language-SQL"><code class="language-SQL">DROP DATABASE [IF EXISTS] 数据库名;</code></pre><p>使用</p><pre class=" language-SQL"><code class="language-SQL">USE 数据库名;</code></pre><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>创建和查询</p><p>查询当前数据库所有表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span></code></pre><p>查询表结构</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DESC</span> 表名<span class="token punctuation">;</span></code></pre><p>查询指定表的建表语句</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span></code></pre><p>数值类型</p><table><thead><tr><th>类型</th><th>大小</th><th>有符号范围</th><th>无符号（UNSIGNED）范围</th></tr></thead><tbody><tr><td>TINTINT</td><td>1 byte</td><td>(-128,127)</td><td>(0,255)</td></tr><tr><td>SMALLINT</td><td>2</td><td>(-32468,32767)</td><td>(0,65535)</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>(-8388608,8388607)</td><td>(0,16777215)</td></tr><tr><td>INT或INTEGER</td><td>4</td><td>(-2147483648,2147483647)</td><td>(0,4294967295)</td></tr><tr><td>GIBINT</td><td>8</td><td>(-2^63,2^63-1)</td><td>(0,2^64-1)</td></tr><tr><td>FLOAT</td><td>4</td><td></td><td></td></tr><tr><td>DOUBLE</td><td>8</td><td></td><td></td></tr><tr><td>DECIMAL</td><td></td><td></td><td></td></tr></tbody></table><p>字符串类型</p><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65535</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65535</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-1677215</td><td>二进制的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-1677215</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4294967295</td><td>二进制的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4294967295</td><td>极大文本数据</td></tr></tbody></table><p>日期类型</p><table><thead><tr><th>类型</th><th>大小</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>HH:MM:SS</td><td>时间值</td></tr><tr><td>YEAR</td><td>1</td><td>YYYY</td><td>年份</td></tr><tr><td>DATETIME</td><td>8</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><p>案例：设计一张员工表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">comment</span><span class="token string">'编号'</span><span class="token punctuation">,</span>    workno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">comment</span><span class="token string">'工号'</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">comment</span><span class="token string">'姓名'</span><span class="token punctuation">,</span>    gender char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">comment</span><span class="token string">'性别'</span><span class="token punctuation">,</span>    age <span class="token keyword">tinyint</span> unsigned <span class="token keyword">comment</span><span class="token string">'年龄'</span><span class="token punctuation">,</span>    idcard char<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">comment</span><span class="token string">'身份证'</span><span class="token punctuation">,</span>    entydate <span class="token keyword">date</span> <span class="token keyword">comment</span><span class="token string">'入职时间'</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'员工表'</span>；</code></pre><ol start="2"><li>修改和删除</li></ol><ul><li>添加字段</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> 字段名 类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 注释<span class="token punctuation">]</span><span class="token punctuation">[</span>约束<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>案例：</p><p>为emp表添加昵称nickname</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> emp <span class="token keyword">add</span> nickname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">comment</span><span class="token string">'昵称'</span><span class="token punctuation">;</span></code></pre><ul><li>修改数据类型</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 字段名 新数据类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>修改字段名和字段类型</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 注释<span class="token punctuation">]</span> <span class="token punctuation">[</span>约束<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>案例：</p><p>将emp表nickname字段修改为username，类型为vachar(30)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> emp change nickname usernam <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">comment</span><span class="token string">'用户名'</span><span class="token punctuation">;</span></code></pre><ul><li>删除字段</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> 字段名<span class="token punctuation">;</span></code></pre><p>案例：</p><p>将emp表的字段username删除</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> emp <span class="token keyword">drop</span> username<span class="token punctuation">;</span></code></pre><ul><li>修改表名</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> 新表名<span class="token punctuation">;</span></code></pre><p>案例：</p><p>将emp表名修改为employee</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> emp <span class="token keyword">rename</span> <span class="token keyword">to</span> employee<span class="token punctuation">;</span></code></pre><ul><li>删除表</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 表名<span class="token punctuation">;</span></code></pre><ul><li>删除指定表，并重新创建该表</li></ul><pre><code>TRUNCATE TABLE 表名;</code></pre><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><ul><li>添加数据(INSERT)</li><li>修改数据(UPDATE)</li><li>删除数据(DELETE)</li></ul><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>给指定端添加数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> employee<span class="token punctuation">(</span>id<span class="token punctuation">,</span>workno<span class="token punctuation">,</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>age<span class="token punctuation">,</span>idcard<span class="token punctuation">,</span>entydate<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'1234567891234678'</span><span class="token punctuation">,</span><span class="token string">'2000-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>给全部字段添加数据</p><p>单条数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'1234567891234678'</span><span class="token punctuation">,</span><span class="token string">'2000-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>多条数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'BBB'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'1234567891234678'</span><span class="token punctuation">,</span><span class="token string">'2000-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token string">'CCC'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'1234567891234678'</span><span class="token punctuation">,</span><span class="token string">'2000-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 字段<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>案例：</p><p>修改id为1的数据，将name修改为jack</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> employee <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">'jack'</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>没有where条件将更新整个表</p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><h4 id="查询多个字段"><a href="#查询多个字段" class="headerlink" title="查询多个字段"></a>查询多个字段</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span>字段<span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span></code></pre><p>设置别名</p><pre class=" language-SQL"><code class="language-SQL">SELECT 字段 [AS 别名] FROM 表名;</code></pre><p>AS也可以不写</p><p>去除重复记录</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> 字段列表 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span></code></pre><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件列表<span class="token punctuation">;</span></code></pre><p>条件</p><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td></td></tr><tr><td>&gt;&#x3D;</td><td></td></tr><tr><td>&lt;</td><td></td></tr><tr><td>&lt;&#x3D;</td><td></td></tr><tr><td>&#x3D;</td><td></td></tr><tr><td>&lt;&gt; 或者 !&#x3D;</td><td></td></tr><tr><td>BETWEEN…AND…</td><td></td></tr><tr><td>IN(…)</td><td>在in列表中的值,多选一</td></tr><tr><td>LIKE</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr><tr><td>AND 或 &amp;&amp;</td><td></td></tr><tr><td>OR 或 ||</td><td></td></tr><tr><td>NOT 或 !</td><td></td></tr></tbody></table><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 聚合函数<span class="token punctuation">(</span>字段列表<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span></code></pre><p>分组查询</p><pre><code>SELECT 字段列表 FROM 表名 [WHERE 条件] GROP BY 分组字段名 [HAVING 分组后的过滤条件];</code></pre><p>WHERE与HAVING区别</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>案例：</p><p>查询年龄小于45的员工，并且根据工作地址分组，获取员工数量大于对于3的工作地址</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> workaddress<span class="token punctuation">,</span>cout<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> frome emp <span class="token keyword">where</span> age<span class="token operator">&lt;</span><span class="token number">45</span> <span class="token keyword">group</span> <span class="token keyword">by</span> workaddress <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 字段<span class="token number">1</span> 排序方式<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span> 排序方式<span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>排序方式</p><ul><li>ASC 升序（默认）</li><li>DESC 降序</li></ul><p>注意：如果是多字段排序，当第一个字段相同时，才会根据第二个字段进行排序。</p><p>案例：</p><p>根据年龄对公司的员工进行排序，年龄相同，再按照入职时间进行降序排序</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp orderby age <span class="token keyword">asc</span><span class="token punctuation">,</span> entrydate <span class="token keyword">desc</span><span class="token punctuation">;</span></code></pre><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><pre class=" language-SQL"><code class="language-SQL">SELECT 字段列表 FROM 表名 LIMIT 起始索引,查询记录数;</code></pre><p>起始索引&#x3D;（查询页码-1）* 每页显示记录数。</p><p>如果查询的是第一页数据，起始索引可以省略。</p><p>案例：</p><ol><li>查询第一页员工数据，每页展示10条数据</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>查询第二页员工数据，每页展示10条数据</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span></code></pre><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><ul><li>查询用户</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> mysql<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span></code></pre><ul><li>创建用户</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span>@'主机名<span class="token string">' IDENTIFIED BY '</span>密码'<span class="token punctuation">;</span></code></pre><ul><li>修改用户密码</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span>@'主机名<span class="token string">' IDENTIFIED WHITH mysql_native_password By '</span>新密码'<span class="token punctuation">;</span></code></pre><ul><li>删除用户</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span></code></pre><p>案例：</p><p>创建用户xxx，只能在localhost访问，密码123456</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'xxx'</span>@'localhost<span class="token string">' identified by '</span><span class="token number">123456</span>'<span class="token punctuation">;</span></code></pre><p>创建用户AAA，可以在任意主机访问数据库，密码123456</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'AAA'</span>@'<span class="token operator">%</span><span class="token string">' identified by '</span><span class="token number">123456</span>'<span class="token punctuation">;</span></code></pre><p>修改用户AAA密码为1234</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'AAA'</span>@'<span class="token operator">%</span><span class="token string">' identified with mysql_native_password by '</span><span class="token number">1234</span>'<span class="token punctuation">;</span></code></pre><p>删除xxx用户</p><pre><code>drop user &#39;xxx&#39;@&#39;localhost&#39;;</code></pre><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL,ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库&#x2F;表、视图</td></tr><tr><td>CREATE</td><td>创建数据库&#x2F;表</td></tr></tbody></table><p>查询权限</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span></code></pre><p>授予权限</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> 权限列表 <span class="token keyword">ON</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">TO</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span></code></pre><p>撤销权限</p><pre><code>REVOKE 权限列表 ON 数据库.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(S1,S2,…Sn)</td><td>字符串拼接</td></tr><tr><td>LOWER(str)</td><td>字符串全部转换为小写</td></tr><tr><td>UPPER(str)</td><td>字符串全部转换为大写</td></tr><tr><td>LPAD(str,n,pad)</td><td>左填充</td></tr><tr><td>RPAD(str,n,pad)</td><td>右填充</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str,start,len)</td><td>返回字符串str从start位置器的len个长度的字符串</td></tr></tbody></table><p>案例：</p><p>由于业务需求变更，企业员工的工号，统一为5位数，目前不足5位数的全部在前面补0。如1号员工00001。</p><pre><code>update emp set workno = lpad(workno,5,&#39;0&#39;);</code></pre><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x,y)</td><td>返回x&#x2F;y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x,y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATA_ADD(date,INTERVAL expr type)</td><td>返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回date1和date2之间的天数</td></tr></tbody></table><p>案例：</p><p>查询所有员工的入职天数，并根据入职天数倒序排序</p><pre><code>select name,datediff(curdate(),entrydate) as &#39;entrydays&#39; from emp order by entrydays desc;</code></pre><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value,t,f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1,value2)</td><td>如果value1不为空，则返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [val1] THEN [res1]…ELSE[default] END</td><td>如果val1为true，返回res1，…否则返回default默认值</td></tr><tr><td>CASE[expr] WHEN [val1] THEN [res1] …[default] END</td><td>如果expr的值等于val1，返回res1，…否则返回default默认值</td></tr></tbody></table><p>案例：</p><p>统计班级各个学员的成绩，展示如下：</p><ul><li>成绩&gt;&#x3D;85 展示优秀</li><li>成绩&gt;&#x3D;60表示及格</li><li>否则不及格</li></ul><pre><code>select id, name,(case when math &gt;=85 then &#39;优秀&#39; when math&gt;=60 then &#39;及格&#39; else &#39;不及格&#39; end) mathfrom score;</code></pre><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>分类</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为空</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一，不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.16版本后）</td><td>保证字段值满足某一条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>让两张表之间的数据建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p>示例</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">unique</span> <span class="token keyword">comment</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span> <span class="token keyword">check</span> <span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>age<span class="token operator">&lt;=</span><span class="token number">120</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    <span class="token keyword">status</span> char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'1'</span> <span class="token keyword">comment</span> <span class="token string">'状态'</span><span class="token punctuation">,</span>    gender char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'性别'</span>   <span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'用户表'</span><span class="token punctuation">;</span></code></pre><p>外键：在建表时添加或者建表后添加</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>    字段名 数据类型    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">[</span><span class="token keyword">CONSTRAINT</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>外键名称<span class="token punctuation">]</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表 <span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表 <span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>删除外键</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> 外键名称<span class="token punctuation">;</span></code></pre><p>删除&#x2F;更新行为</p><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除&#x2F;更新记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与RESTRICT一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除&#x2F;更新记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新</td></tr><tr><td>CASCADE</td><td>当在父表中删除&#x2F;更新记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录</td></tr><tr><td>SER NULL</td><td>当在父表中删除&#x2F;更新记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null(这就要求该外键值允许取null)</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设置成一个默认的值（Innodb不支持）</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> emp <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_emp_dept_id <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">references</span> dept<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">cascade</span> <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">cascade</span><span class="token punctuation">;</span></code></pre><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><p>基本上分为三种</p><ol><li>一对多</li><li>多对多</li><li>一对一</li></ol><p>一对多</p><ul><li>案例：部门与员工的关系</li><li>关系：一个部门对应多个员工，一个员工对应一个部门</li><li>实现：在多的一方建立外键，指向一的一方的主键</li></ul><p>多对多</p><ul><li>案例：学生与课程的关系</li><li>关系：一个学生可以选多门课程，一门课程也可以提供多个学生选择</li><li>实现：建立第三张表，中间至少包含两个外键，分别关联两个主键</li></ul><p>一对一</p><ul><li>案例：用户与用户详情的关系</li><li>关系：一对一关系，多用于表单拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率</li><li>实现：在任意一方加入外键，关联另一方的主键，并且设置外键为唯一的(UNIQUE)</li></ul><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>查询每一个员工的姓名，及关联的部门名称</p><p>隐式内连接</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>name <span class="token keyword">from</span> emp <span class="token number">e</span> <span class="token punctuation">,</span>dept <span class="token number">d</span> <span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>id</code></pre><p>显式内连接</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>name <span class="token keyword">from</span> emp <span class="token number">e</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> dept <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>id<span class="token comment" spellcheck="true">--或</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>name <span class="token keyword">from</span> emp <span class="token number">e</span> <span class="token keyword">join</span> dept <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>id</code></pre><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>左外连接 left join</p><p>查询emp表的所有数据，和对应的部门信息</p><pre><code>select e.*,d.name from emp e left out join dept d on e.dept_id = d.id;</code></pre><p>右外连接 right join</p><p>查询dept表的所有数据，和对应的员工信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token number">e</span> <span class="token keyword">right</span> <span class="token keyword">join</span> dept <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>查询员工及其领导的名字</p><p>实际上一张表，把一张表看成两张表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>name <span class="token keyword">from</span> emp <span class="token number">a</span><span class="token punctuation">,</span>emp <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>managerid<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><p>查询所有员工emp及其领导的名字，如果没有领导，也要查询出来</p><pre><code>select a.name &#39;员工&#39;,b.name &#39;领导&#39; from emp a left join emp b on a.managerid = b.id;</code></pre><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>union     合并去重</p><p>unionall 合并</p><p>把多次查询的结果合并起来，形成一个新的查询结果</p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，成为嵌套查询，又称子查询</p><p>根据子查询结果不同分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询 （子查询结果为一列）</li><li>行子查询 （子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置，分为：WHERE之后、FROM之后、SELECT之后。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务简介</p><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--查看提交方式</span><span class="token keyword">SET</span> @<span class="token variable">@autocommit</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--设置为手动提交</span></code></pre><p>提交事务</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">COMMIT</span><span class="token punctuation">;</span></code></pre><p>回滚事务</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span></code></pre><p>开启事务</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> 或 <span class="token keyword">BEGIN</span><span class="token punctuation">;</span></code></pre><p>开启事务后成功执行COMMIT;失败ROLLBACK;</p><h3 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性(Consistency)：事务完成时，必须使所有的数据保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性(Durability)：事务一旦提交或者回滚，他对数据库中的数据的改变就是永久的。</li></ul><h3 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个还没有提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但是两次读取的数据不同，称之为不可重复读</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，并没有对应的数据行，但是插入数据时，又发现这行数据已经存在了，好像出现了“幻影”</td></tr></tbody></table><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><p>为了解决并发事务问题</p><table><thead><tr><th align="center">隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">Read uncommitted</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">Read committed</td><td align="center">x</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">Repeatable Read(默认)</td><td align="center">x</td><td align="center">x</td><td align="center">√</td></tr><tr><td align="center">Serializable</td><td align="center">x</td><td align="center">x</td><td align="center">x</td></tr></tbody></table><p>查看事务隔离级别</p><pre><code>SELECT @@TRANSACTION_ISOLATION;</code></pre><p>设置事务隔离级别</p><pre><code>SET [SESSION|GLOBLE] TRANSACTION ISOLATION LEVEL &#123;Read uncommitted|Read committed|Repeatable Read|Serializable&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql进阶</title>
      <link href="/2023/09/16/mysql-jin-jie/"/>
      <url>/2023/09/16/mysql-jin-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql进阶"><a href="#Mysql进阶" class="headerlink" title="Mysql进阶"></a>Mysql进阶</h1><h2 id="Mysql体系结构"><a href="#Mysql体系结构" class="headerlink" title="Mysql体系结构"></a>Mysql体系结构</h2><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20210127220251732.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvb19zdWVuZ2Jpbg%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1658827656&t=b5122baa010a4ee72e5e0f50fb80730b"></p><p>上图中，Connection pool 为连接层，Management Services &amp; Utilities …Caches &amp; Buffers 为 SQL 层，Pluggable Storage Engines 为存储引擎层，File system、Files &amp; Logs 为文件系统层。</p><p>Connectors 不属于以上任何一层，可以将 Connectors 理解为各种客户端、应用服务，主要指的是不同语言与 SQL 的交互。</p><h4 id="1-连接层"><a href="#1-连接层" class="headerlink" title="1. 连接层"></a>1. 连接层</h4><p>应用程序通过接口（如 ODBC、JDBC）来连接 MySQL，最先连接处理的是连接层。连接层包括通信协议、线程处理、用户名密码认证 3 部分。</p><ul><li>通信协议负责检测客户端版本是否兼容 MySQL 服务端。</li><li>线程处理是指每一个连接请求都会分配一个对应的线程，相当于一条 SQL 对应一个线程，一个线程对应一个逻辑 CPU，在多个逻辑 CPU 之间进行切换。</li><li>密码认证用来验证用户创建的账号、密码，以及 host 主机授权是否可以连接到 MySQL 服务器。</li></ul><p>Connection Pool（连接池）属于连接层。由于每次建立连接都需要消耗很多时间，连接池的作用就是将用户连接、用户名、密码、权限校验、线程处理等需要缓存的需求缓存下来，下次可以直接用已经建立好的连接，提升服务器性能。</p><h4 id="2-服务层（SQL层-）"><a href="#2-服务层（SQL层-）" class="headerlink" title="2. 服务层（SQL层 ）"></a>2. 服务层（SQL层 ）</h4><p>SQL 层是 MySQL 的核心，MySQL 的核心服务都是在这层实现的。主要包含权限判断、查询缓存、解析器、预处理、查询优化器、缓存和执行计划。</p><ul><li>权限判断可以审核用户有没有访问某个库、某个表，或者表里某行数据的权限。</li><li>查询缓存通过 Query Cache 进行操作，如果数据在 Query Cache 中，则直接返回结果给客户端，不必再进行查询解析、优化和执行等过程。</li><li>查询解析器针对 SQL 语句进行解析，判断语法是否正确。</li><li>预处理器对解析器无法解析的语义进行处理。</li><li>查询优化器对 SQL 进行改写和相应的优化，并生成最优的执行计划，就可以调用程序的 API 接口，通过存储引擎层访问数据。</li></ul><p>Management Services &amp; Utilities、SQL Interface、Parser、Optimizer 和 Caches &amp; Buffers 属于 SQL 层，详细说明如下表所示。</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Management Services &amp; Utilities</td><td>MySQL 的系统管理和控制工具，包括备份恢复、MySQL 复制、集群等。</td></tr><tr><td>SQL Interface（SQL 接口）</td><td>用来接收用户的 SQL 命令，返回用户需要查询的结果。例如 SELECT FROM 就是调用 SQL Interface。</td></tr><tr><td>Parser（查询解析器）</td><td>在 SQL 命令传递到解析器的时候会被解析器验证和解析，以便 MySQL 优化器可以识别的数据结构或返回 SQL 语句的错误。</td></tr><tr><td>Optimizer（查询优化器）</td><td>SQL 语句在查询之前会使用查询优化器对查询进行优化，同时验证用户是否有权限进行查询，缓存中是否有可用的最新数据。它使用“选取-投影-连接”策略进行查询。  例如 <code>SELECT id, name FROM student WHERE gender = &quot;女&quot;;</code>语句中，SELECT 查询先根据 WHERE 语句进行选取，而不是将表全部查询出来以后再进行 gender 过滤。SELECT 查询先根据 id 和 name 进行属性投影，而不是将属性全部取出以后再进行过滤，将这两个查询条件连接起来生成最终查询结果。</td></tr><tr><td>Caches &amp; Buffers（查询缓存）</td><td>如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。这个缓存机制是由一系列小缓存组成的，比如表缓存、记录缓存、key 缓存、权限缓存等。</td></tr></tbody></table><h4 id="3-存储引擎层"><a href="#3-存储引擎层" class="headerlink" title="3. 存储引擎层"></a>3. 存储引擎层</h4><p>Pluggable Storage Engines 属于存储引擎层。存储引擎层是 MySQL 数据库区别于其他数据库最核心的一点，也是 MySQL 最具特色的一个地方。主要负责 MySQL 中数据的存储和提取。</p><p>因为在关系数据库中，数据的存储是以表的形式存储的，所以存储引擎也可以称为表类型（即存储和操作此表的类型）。</p><h4 id="4-文件系统层"><a href="#4-文件系统层" class="headerlink" title="4. 文件系统层"></a>4. 文件系统层</h4><p>文件系统层主要是将数据库的数据存储在操作系统的文件系统之上，并完成与存储引擎的交互。</p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>mysql5.5后默认存储引擎INNODB</p><p>存储引擎基于表，而不是数据库。</p><p>查看当前数据库支持的引擎</p><pre><code>SHOW ENGINES;</code></pre><p>创建表并指定引擎</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_myisam<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span> MyISAM<span class="token punctuation">;</span></code></pre><h3 id="INNODB"><a href="#INNODB" class="headerlink" title="INNODB"></a>INNODB</h3><p>INNODB是一种兼顾高可靠性和高性能的通用存储引擎，mysql5.5后默认存储引擎是INNODB。</p><p>特点</p><ul><li>DML操作遵循ACID模型，支持事务</li><li>行级锁，提高并发性能</li><li>支持外键约束，保证数据的完整性和正确性</li></ul><p>表空间文件</p><ul><li>.idb</li></ul><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM是MySQL早期默认存储引擎</p><p>特点</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件 ：</p><ul><li>.sdi存储表结构信息</li><li>.MYD存储数据</li><li>.MYI存储索引</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory引擎的表结构是存储在内存中的，由于受到硬件问题、或者断电影响，只能将这些表作为临时表或缓存使用。</p><p>特点</p><ul><li>内存存放</li><li>hash索引（默认）</li></ul><p>文件</p><ul><li>.sdi  存储表结构信息</li></ul><p>存储引擎特点</p><table><thead><tr><th>特点</th><th>innoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引（index）是帮助mysql高效获取数据的数据结构（有序）</p><p>优缺点</p><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>提高数据检索的效率，降低数据库的io成本</td><td>索引大大提高了查询效率，同时降低了更新表的速率</td></tr><tr><td>通过索引列对数据进行排序，降低数据排序的成本，降低cpu的消耗</td><td>索引列也是要占用空间的</td></tr></tbody></table><p>MySQL的存储引擎是在存储引擎层实现的，不同的存储引擎有不同的结构，主要包含以下几种</p><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>最常见的索引类型，大部分引擎都支持</td></tr><tr><td>Hash索引</td><td>底层数据结构是哈希表实现的，只能精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-tree（空间索引）</td><td>空间索引是MyISAM引擎一个特殊索引类型，主要用于地理空间数据类型</td></tr><tr><td>Full-text（全文索引）</td><td>是一种通过简历倒排序索引，快速匹配文档的方式。</td></tr></tbody></table><p>索引结构支持</p><table><thead><tr><th>索引</th><th>innodb</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Hash索引</td><td></td><td></td><td>√</td></tr><tr><td>R-tree</td><td></td><td>√</td><td></td></tr><tr><td>Full-text</td><td>5.6版本后√</td><td>√</td><td></td></tr></tbody></table><p>为什么InnoDB存储引擎采用B+tree索引结构</p><ul><li>相对于二叉树，层级更少，搜索效率更高</li><li>对于B-tree，无论叶子节点还是非叶子节点都会保存数据，导致数的高度增加，性能降低</li></ul><p>索引的存储方式</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引</td><td>将数据存储于索引放到了一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只能由一个</td></tr><tr><td>二级索引</td><td>将数据于索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存放多个</td></tr></tbody></table><p>聚集索引选取规则</p><ul><li>如果存在主键，主键就是聚集索引</li><li>如果不存在组件，将第一个唯一（UNIQUE）索引作为聚集索引</li><li>如果没有主键或者没有唯一索引，则innodb会自动生成一个rowid作为隐藏的聚集索引。</li></ul><p>比较下main哪个sql执行效率高</p><p>其中id为主键，name字段创建的有索引</p><pre><code>select * from user where id = 10;select * from user where name = &#39;Arm&#39;</code></pre><p>答案是第一条，第一条只需通过聚合索引直接查找到；第二条要先通过二级索引查找到存储的聚集索引对应的主键，再通过聚集索引查到（回表查询）。</p><h3 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h3><p>创建索引 </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span><span class="token operator">|</span>FULLTEXT<span class="token punctuation">]</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name <span class="token punctuation">(</span>index_col_name<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>如为<span class="token keyword">user</span>创建索引<span class="token keyword">create</span> <span class="token keyword">index</span> inx_user_name <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>为phone创建唯一索引<span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> inx_user_phone <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>为profession、age、<span class="token keyword">status</span>创建联合索引<span class="token keyword">create</span> <span class="token keyword">index</span> idx_user_pro_age_sta <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>profession<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>查看索引</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> table_name<span class="token punctuation">;</span></code></pre><p>删除索引</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">index</span> index_name <span class="token keyword">on</span> table_name</code></pre><h3 id="sql性能分析"><a href="#sql性能分析" class="headerlink" title="sql性能分析"></a>sql性能分析</h3><p>sql执行频率</p><pre><code>show global status like &#39;Com_______&#39;;</code></pre><h4 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><p>记录了所有执行时间超过指定参数（10s）的所有sql语句的日志</p><p>查看慢查询日志是否开启</p><pre class=" language-linux"><code class="language-linux">show variable like 'slow_query_log';</code></pre><p>配置慢查询日志</p><p>vi &#x2F;etc&#x2F;my.cof</p><pre><code>开启慢查询slow_query_log=1设置慢查询日志的时间为2slong_query_time=2s</code></pre><p>编辑后重启mysql ：systemctl restart mysqld</p><p>慢查询日志记录信息存储在：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p><p>命令：tail -f localhost-slow.log   实时查看尾部内容</p><p>同时执行查询sql，如果查询时间超过了指定的值，就会输出显示出来</p><h4 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h4><p>帮助我们了解时间都消耗到哪了</p><p>查看当前mysql是否支持profile</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@have_profiling</span><span class="token punctuation">;</span></code></pre><p>开启profiling</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> profiling<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>执行一系列sql操作后，然后通过以下指令查看执行耗时</p><pre><code>查看每一条sql耗时show profiles;查看指定query_idshow profile for query query_id;查看query_id的sql语句cpu使用情况show profile cpu for query query_id;</code></pre><h4 id="explain执行计划"><a href="#explain执行计划" class="headerlink" title="explain执行计划"></a>explain执行计划</h4><p>explain或者desc命令获取mysql如何执行select语句的信息，包括在select语句执行过程中如何连接和连接的顺序</p><p>explain+sql语句</p><p>字段含义</p><ul><li><p>id：select查询的序列号，表示查询中执行select子句或者是操作表的顺序（id相同则从上到下；id越大，越先执行）。</p></li><li><p>select_type：表示select的类型  。</p></li><li><p>type：表示连接类型，性能由好到差为NULL、system、const、eq_ref、ref、range、index、all。</p></li><li><p>possible_key：显示可能应用到这张表上的索引，一个或多个。</p></li><li><p>key_len: 表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，长度越短越好。</p></li><li><p>rows：mysql认为必须执行查询的行数，在innodb中，这是一个估计值。</p></li><li><p>filtered：表示返回结果的行数占需读取行数的百分比，filtered越大越好。</p></li></ul><h3 id="索引原则"><a href="#索引原则" class="headerlink" title="索引原则"></a>索引原则</h3><h4 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h4><ul><li>最左前缀法则</li></ul><p>如果索引了多列（联合索引），要遵守最左前缀法则。最左前缀法则指的是查询从索引的最左列开始，而且不跳过索引中的列。如果跳过某一列，索引将部分失效（跳过后面的字段索引失效）</p><ul><li>索引列函数运算</li></ul><p>不要再索引列上进行运算操作，否则索引将失效。</p><ul><li>字符串不加引号</li></ul><p>字符串类型字段使用时，不加引号，索引将失效</p><ul><li>模糊查询</li></ul><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p><ul><li>or连接的条件</li></ul><p>用or分割开的条件，如果一边没有索引，那么涉及到的索引都不会被用到</p><ul><li>数据分布影响</li></ul><p>如果mysql评估使用索引比全表更慢，则不使用索引</p><h4 id="sql提示"><a href="#sql提示" class="headerlink" title="sql提示"></a>sql提示</h4><p>优化数据库的一个重要的手段，简单来说，就是在sql语句中加入一些人为的提示（告诉sql用哪个索引）来达到优化操作的目的</p><p>use index  建议使用</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">use</span> <span class="token keyword">index</span><span class="token punctuation">(</span>index_user_pro<span class="token punctuation">)</span><span class="token keyword">where</span> profession<span class="token operator">=</span><span class="token string">'软件工程'</span><span class="token punctuation">;</span></code></pre><p>ignore index  忽略</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">ignore</span> <span class="token keyword">index</span><span class="token punctuation">(</span>index_user_pro<span class="token punctuation">)</span><span class="token keyword">where</span> profession<span class="token operator">=</span><span class="token string">'软件工程'</span><span class="token punctuation">;</span></code></pre><p>force index  强制使用</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">force</span> <span class="token keyword">index</span><span class="token punctuation">(</span>index_user_pro<span class="token punctuation">)</span><span class="token keyword">where</span> profession<span class="token operator">=</span><span class="token string">'软件工程'</span><span class="token punctuation">;</span></code></pre><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>比如二级索引下存储了聚集索引的id（主键），使用该二级索引的时候直接可以得到id。而使用select*有的字段没有建立索引，需要通过id再回表查询。</p><p>尽量使用覆盖索引，减少select *。</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（vachar，text等）时，有时候需要索引很长的字符串，这时会让索引变得很大，查询时，浪费大量的磁盘io，影响查询效率。此时可以将字符串的一部分前缀，用来建立索引。</p><pre><code>create index idx_xxx on table_name(column(n))</code></pre><h3 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h3><ol><li>针对数据量较大，且查询比较频繁的表建立索引。</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。</li><li>尽量选择区分度高的作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</li><li>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</li><li>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。<br>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。<br>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。<br>如果索引列不能存储NULL值，请在创建表时使用NOTNULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</li><li>如果索引列不能存储NULL值，请在创建表时使用NOTNULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</li></ol><h3 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h3><h4 id="insert优化"><a href="#insert优化" class="headerlink" title="insert优化"></a>insert优化</h4><ul><li>批量插入</li><li>手动提交事务</li><li>主键顺序插入  (页分裂，页合并)</li></ul><p>大批量插入数据</p><ul><li>如果一次性需要插入大批量数据，使用insert语句插入性能比较低，此时可以使用mysql数据库提供的load指令进行插入</li></ul><pre><code>客户端连接时，加上参数-local-infilemysql --local-infile -u root -p开启从本地加载文件导入数据的开关set gloab local_infile=1执行load命令将准备好的数据加载到表结构中load data local infile &#39;/root/xxx.sql&#39; into table &#39;tb_user&#39; field terminated by &#39;,&#39; lines teminated by &#39;/n&#39;;</code></pre><h4 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h4><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用auto_increment自增主键</li><li>尽量不要使用uuid做主键或者其他自然主键，如身份证号。</li></ul><h4 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h4><ul><li>根据排序的字段建立合适的索引，多字段排序时，也遵守最左前缀法则。</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序，一个降序，此时需要注意联合索引在创建时的规则（asc&#x2F;desc）</li><li>如果不可避免地出现filesort，大量数据排序时，可以适当增大缓冲区大小sort_buffer_size(默认256k)</li></ul><h4 id="group-by-优化"><a href="#group-by-优化" class="headerlink" title="group by 优化"></a>group by 优化</h4><ul><li>使用索引</li><li>满足最左法则</li></ul><h4 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h4><p>limit 2000000,10    此时需要mysql排序前2000010记录，仅返回2000000-2000010的距离，其它记录丢弃，查询代价非常大</p><p>优化思路：一般分页查询时，通过创建覆盖索引能比较好地提高性能，可以通过覆盖索引加子查询形式进行优化。</p><p>原始查询</p><pre><code>select * from tb_sku limit 2000000,10;</code></pre><p>优化后 </p><pre><code>explain select * from tb_sku t, (select id from tb_sku oder by id limit 2000000,10) a where t.id=a.id;</code></pre><h4 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h4><p>myisam引擎把一个表的总行数存在了磁盘上，因此执行count（*）会直接返回个数，效率很高</p><p>innodb没有好的优化，实在要优化就自己计数  直接使用count（*就行啦）</p><p>count(字段)&lt;count(主键id)&lt;count(1)~~count(*)</p><h4 id="update优化"><a href="#update优化" class="headerlink" title="update优化"></a>update优化</h4><p>注意：</p><p>innodb的行锁是针对索引加的锁，不是针对于记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁（根据索引修该是行锁，没有加索引更新则是表锁，表锁住了并发性能就降低了）。</p><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图是一种虚拟存在的表。</p><p>创建视图</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">view</span> stu_v_1 <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> student <span class="token keyword">where</span> id<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">or</span> replace 看情况使用</code></pre><p>查询视图</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">create</span> <span class="token keyword">view</span> stu_v_1<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> stu_v_1<span class="token punctuation">;</span></code></pre><p>修改视图</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">view</span> stu_v_1 <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> student <span class="token keyword">where</span> id<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>  这也可以用来修改视图<span class="token keyword">alter</span> <span class="token keyword">view</span> stu_v_1  <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> student <span class="token keyword">where</span> id<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span></code></pre><p>删除视图</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">view</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> stu_v_1<span class="token punctuation">;</span></code></pre><ul><li>视图检查选项,在执行操作时检查是否符合视图的定义。</li></ul><pre><code>create or replace view stu_v_1 as select id,name from student where id&lt;=10 with check option;</code></pre><p>with check option 默认值为cascaded    还有个选项是local</p><p>option会将关联的视图都检查</p><p>local只检查定义了with check option的</p><ul><li>视图的更新</li></ul><p>要使视图可更新，视图中的行于基础表中的行必须存在一一对应的关系。</p><ul><li>视图的作用</li></ul><p>简单：视图不仅可以简化用户对数据的理解，也可以简化他们的操作。为那些经常使用查询的定义视图，从而以后不用每次指定全部的查询条件</p><p>安全：数据库可以授权，但不能授权到数据库特点的行和特点的表上。通过视图用户只能查询和修改他们所能看见的数据。</p><h3 id="存储过程-1"><a href="#存储过程-1" class="headerlink" title="存储过程"></a>存储过程</h3><p>思想上就是数据库sql语言层面的代码封装和复用。</p><ul><li>特点：</li></ul><p>封装，复用</p><p>可以接收参数，也可以返回数据</p><p>减少网络交互，效率提升</p><ul><li>创建  procedure</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> p1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>调用</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">call</span> p1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>查看  </p><pre class=" language-sql"><code class="language-sql">数据information_schema<span class="token punctuation">.</span>ROUTINES表中存储查看<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>ROUTINES <span class="token keyword">where</span> ROUTINE_SCHEMA <span class="token operator">=</span> <span class="token string">'数据库'</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> p1<span class="token punctuation">;</span></code></pre><p>删除</p><pre><code>drop procedure if exists p1;</code></pre><p>在命令行执行上面创建procedure可能出现问题，因为有两个分号</p><p>使用关键字delimiter指定sql语句的结束符。</p><pre><code>delimiter $$   指定$$为结束符号</code></pre><pre><code>create procedure p1()begin    select count(*) from student;end$$</code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>系统变量</li></ul><p>查看系统变量</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token punctuation">[</span><span class="token keyword">session</span><span class="token operator">|</span><span class="token keyword">global</span><span class="token punctuation">]</span> variables<span class="token punctuation">;</span>   查看所有系统变量<span class="token keyword">show</span> <span class="token punctuation">[</span><span class="token keyword">session</span><span class="token operator">|</span>globle<span class="token punctuation">]</span> variables <span class="token operator">like</span> <span class="token string">'......'</span> 所有<span class="token operator">like</span>模糊匹配查找变量<span class="token keyword">select</span> @@<span class="token punctuation">[</span><span class="token keyword">session</span><span class="token operator">|</span><span class="token keyword">global</span><span class="token punctuation">]</span><span class="token punctuation">;</span>系统变量名  查看指定系统变量的值</code></pre><p>设置系统变量</p><pre><code>set [session|global] 系统变量名=值;set @@[session|global] 系统变量名=值;</code></pre><p>mysql服务重新启动后，所有设置的全局参数会失效，不想失效的话可以在&#x2F;etc&#x2F;my.cof中配置</p><ul><li>用户自定义变量</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token variable">@myname</span> <span class="token operator">=</span> <span class="token string">'xyl'</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token variable">@myage</span> :<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token variable">@mygendar</span> :<span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token variable">@myhobby</span> :<span class="token operator">=</span> <span class="token string">'java'</span><span class="token punctuation">;</span><span class="token operator">=</span>或者:<span class="token operator">=</span>都可，推荐使用:<span class="token operator">=</span></code></pre><p>使用</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token variable">@myname</span><span class="token punctuation">,</span><span class="token variable">@myage</span><span class="token punctuation">;</span></code></pre><ul><li>局部变量</li></ul><p>declare声明局部变量</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> p2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> stu_count <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> stu_count <span class="token keyword">from</span> student<span class="token punctuation">;</span>    <span class="token keyword">select</span> stu_count<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>赋值</p><pre><code>set 变量名 = 值;set 变量名 := 值;select 字段名 into 变量名 from 表名...；  上面就是使用的这种方式赋值</code></pre><h3 id="存储流程"><a href="#存储流程" class="headerlink" title="存储流程"></a>存储流程</h3><ul><li>if</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> p3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> score <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">58</span><span class="token punctuation">;</span>    <span class="token keyword">declare</span> result vachar<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">85</span> <span class="token keyword">then</span>    <span class="token keyword">set</span> result :<span class="token operator">=</span> <span class="token string">'优秀'</span><span class="token punctuation">;</span>    elseif score <span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">then</span>    <span class="token keyword">set</span> result :<span class="token operator">=</span> <span class="token string">'及格'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token keyword">set</span> result :<span class="token operator">=</span> <span class="token string">'不及格'</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        <span class="token keyword">select</span> result<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><ul><li>参数</li></ul><table><thead><tr><th>类型</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>in</td><td>该参数作为输入</td><td>默认</td></tr><tr><td>out</td><td>该参数作为输出</td><td></td></tr><tr><td>inout</td><td>既可作为输入参数，也可作为输出参数</td><td></td></tr></tbody></table><p>案例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> p4<span class="token punctuation">(</span><span class="token operator">in</span> score <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">out</span> result vachar<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">85</span> <span class="token keyword">then</span>    <span class="token keyword">set</span> result :<span class="token operator">=</span> <span class="token string">'优秀'</span><span class="token punctuation">;</span>    elseif score <span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">then</span>    <span class="token keyword">set</span> result :<span class="token operator">=</span> <span class="token string">'及格'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token keyword">set</span> result :<span class="token operator">=</span> <span class="token string">'不及格'</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">call</span> p4<span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token variable">@result</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 调用，传入<span class="token number">98</span>，输出result<span class="token keyword">select</span> <span class="token variable">@result</span><span class="token punctuation">;</span></code></pre><p>将传入的200分制换算成百分制，然后返回分数 —-&gt;inout</p><pre><code>create procedure p5(inout score double)begin    set score := score*0.5;end;set @score = 78;call p5(@score);select @score;</code></pre><ul><li>case</li></ul><pre><code>case    when 条件 then    end case;</code></pre><ul><li><p>while    </p><p>计算1累加到n,n作为参数传入</p></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> p7<span class="token punctuation">(</span><span class="token operator">in</span> n <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">when</span> n<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">do</span>        <span class="token keyword">set</span> total :<span class="token operator">=</span> total<span class="token operator">+</span>n<span class="token punctuation">;</span>        <span class="token keyword">set</span> n:<span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>    <span class="token keyword">select</span> total<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">call</span> p7<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><ul><li>repeat  满足条件退出循环</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> p8<span class="token punctuation">(</span><span class="token operator">in</span> n <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    repeat        <span class="token keyword">set</span> total :<span class="token operator">=</span> total<span class="token operator">+</span>n<span class="token punctuation">;</span>        <span class="token keyword">set</span> n:<span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span>    until n<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> repeat<span class="token punctuation">;</span>        <span class="token keyword">select</span> total<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">call</span> p8<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><ul><li><p>loop    </p><p>leave 离开循环</p></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> p9<span class="token punctuation">(</span><span class="token operator">in</span> n <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>        sum:loop        <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token keyword">then</span>        leave sum<span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        <span class="token keyword">set</span> total :<span class="token operator">=</span> total<span class="token operator">+</span>n<span class="token punctuation">;</span>        <span class="token keyword">set</span> n:<span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> loop sum<span class="token punctuation">;</span>        <span class="token keyword">select</span> total<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">call</span> p8<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>计算偶数数累加  irerate跳过本次循环</p><pre><code>create procedure p10(in n int)begin    declare total int default 0;        sum:loop        if n&lt;0 then        leave sum;        end if;                if n%2 = 1 then            iterate sum;        end if;                set total := total+n;        set n:= n-1;    end loop sum;        select total;end;call p8(10)</code></pre><ul><li>游标</li></ul><p>略</p><ul><li>存储函数</li></ul><p>存储函数是有返回值的存储过程，参数只能是int类型的</p><p>使用：略</p><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器是与表有关的数据库对象，指在insert&#x2F;update&#x2F;delete之前或之后，触发并执行触发器中定义的sql语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作</p><p>使用别名old和new来引用触发器中发生变化的记录内容。现在触发器还只支持行级触发，不支持语句级触发。</p><ul><li>创建</li></ul><pre><code>CREATE TRIGGER trigger_nameBEFORE/AFTER INSERT/UPDATE/DELETEON tbl_name FOR EACH ROWBEGIN    trigger_stmt;END;</code></pre><ul><li>查看</li></ul><pre><code>show triggers;</code></pre><ul><li>删除</li></ul><pre><code>drop trigger [schema_name] trigger_name;如果没有指定schema_name，默认为当前数据库</code></pre><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>并发访问时，解决数据访问的一致性、有效性问题。</p><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除了传统的计算资源争用外，数据的共享也是一种。</p><p>分类</p><ul><li>全局锁：锁定数据库中的所有表</li><li>表级锁：每次操作锁住整张表</li><li>行级锁：每次操作锁住对应的行数据</li></ul><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>对整个数据库实例加锁，加锁后整个实例处于只读状态，后续的dml，ddl语句等将被阻塞</p><p>最经典的使用场景就是做全库的逻辑备份。</p><p>sql</p><pre class=" language-sql"><code class="language-sql">flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span><span class="token punctuation">;</span>加全局锁</code></pre><p>控制台命令行进行备份</p><pre><code>mysqldump -h 192.168.200.200 -uroot -p1234 db01 &gt; D:db01.sql</code></pre><p>备份完成后执行(sql)</p><pre class=" language-sql"><code class="language-sql">unlock <span class="token keyword">tables</span><span class="token punctuation">;</span></code></pre><p>弊端</p><ol><li>如果在主库上备份，那么备份期间不能执行更新，业务基本上就得停摆。</li><li>如果在从库上备份，那么备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟</li></ol><p>在INNODB引擎中，我们可以在备份时加上参数–SINGLE-TRANSACTION参数来完成不加锁的一致性备份</p><pre><code>mysqldump --single-transaction -h 192.168.200.200 -uroot -p1234 db01 &gt; D:db02.sql</code></pre><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><p>表级锁主要分为以下三类</p><ol><li>表锁</li><li>元数据锁（meta data lock）</li><li>意向锁</li></ol><h4 id="表锁-1"><a href="#表锁-1" class="headerlink" title="表锁"></a>表锁</h4><p>分为2类</p><ul><li>表共享读锁（read lock）</li><li>表独占写锁 （write lock）</li></ul><p>语法</p><pre><code>lock tables 表名 read/write;</code></pre><p>加了读锁后本客户端和其他客户端只能读，不能写</p><p>加了写锁后，本客户端可以读写，其他客户端不能读写</p><h4 id="元数据锁（MDL）"><a href="#元数据锁（MDL）" class="headerlink" title="元数据锁（MDL）"></a>元数据锁（MDL）</h4><p>为了避免DML与DDL冲突，保证读写的正确性</p><p>在Mysql5.5中引入了MDL</p><p>alter语句里面是排他锁，会与其他语句的锁互斥。意思当前客户端除了alter的sql语句使用了的锁是兼容的，而此时在其他客户端使用alter语句就不会成功（因为alter语句的锁排斥其他语句的锁）</p><h4 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h4><p>在添加了表锁时，innodb会对表是否有行锁进行检查，如果检查到有行锁后会检查有无行锁，进行一个个检查行是否具备行锁太慢，于是增加了意向锁。此时查看有无行锁，是否能创建表锁就看意向锁的类型了。</p><ol><li>意向共享锁（IS）: （select）与表锁共享锁read兼容，与表锁write互斥</li></ol><p>也就是说添加了意向共享锁后，另外的客户端执行添加表锁read后可以成功的，而不能添加write锁</p><pre class=" language-sql"><code class="language-sql">下面<span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share mode</span>为表加入了行锁和意向共享锁<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> score <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share mode</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>意向排他锁（IX）: （insert、update、delete）与read，write都互斥</li></ol><h3 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h3><p>通过对索引上的索引项进行加锁（因为索引下存放的数据下（id主键）存放了行数据）</p><ol><li>行锁：锁定单个行记录的锁</li><li>间隙锁：锁定索引记录间的间隙，确保间隙不变，防止其他事务对间隙进行insert，产生幻读。</li><li>临键锁（next-key）：行锁和间隙锁的组合</li></ol><h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><table><thead><tr><th align="left">sql</th><th>行锁类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">inset</td><td>排他锁</td><td>自动加锁</td></tr><tr><td align="left">update</td><td>排他锁</td><td>自动加锁</td></tr><tr><td align="left">delete</td><td>排他锁</td><td>自动加锁</td></tr><tr><td align="left">select正常</td><td>不加任何锁</td><td></td></tr><tr><td align="left">select …lock in share mode</td><td>共享锁</td><td>手动添加了lock in share mode</td></tr><tr><td align="left">select…for update</td><td>排他锁</td><td>手动添加了for update</td></tr></tbody></table><ul><li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，会自动优化为行锁</li><li>InnoDB的行锁是针对索引加的锁，如果不通过索引条件检索数据，那么INNODB将对表中的所有记录加锁，此时会升级为表锁。</li></ul><h4 id="间隙锁和临键锁"><a href="#间隙锁和临键锁" class="headerlink" title="间隙锁和临键锁"></a>间隙锁和临键锁</h4><p>默认情况下，INNODB在REPEATABLE READ事务隔离级别运行，INNODB使用next-key锁进行搜索和索引扫描，以防止幻读。</p><ul><li>索引上的等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁。</li><li>索引上的等值查询（普通索引），向右遍历时最后一个值不满足查询需求时，next-key lock 退化为间隙锁</li></ul><p>比如说现有主键 1 .3 .4 .7.9….，此时执行更新id为5的操作，就会锁住4到7之间的空隙。另外的客户端再执行插入id为6的数据不能成功，等前面的事务（更新id为5的操作）提交后才可以成功。</p><h2 id="InnoDB引擎"><a href="#InnoDB引擎" class="headerlink" title="InnoDB引擎"></a>InnoDB引擎</h2><ul><li>逻辑存储结构</li></ul><p>表空间–段—区(1M)—-页(16K)——行</p><ul><li><p>架构</p><p>内存架构： </p><p>1.Buffer Pool缓冲池是主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。</p><p>缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态，将Page分为三种类型:free page:空闲page，未被使用。<br>clean page:被使用page，数据没有被修改过。<br>dirty page:脏页，被使用page，数据被修改过，也中数据与磁盘的数据产生了不一致。</p><p>2.Change Buffer:更改缓冲区（针对于非唯一二级索引页)，在执行DML语句时，如果这些数据Page没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区Change Buffer中，在未来数据被读取时，再将数据合并恢复到Buffer Pool中，再将合并后的数据刷新到磁盘中。</p><p>3.Adaptive Hash lndex:自适应hash索引，用于优化对Buffer Pool数据的查询。InnoDB存储引擎会监控对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立hash索引，称之为自适应hash索引。</p><p>自适应哈希索引，无需人工干预，是系统根据情况自动完成。参数: adaptive_hash_index</p><p>4.Log Buffer:日志缓冲区，用来保存要写入到磁盘中的log日志数据（redo log , undo log)，默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中。如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘I&#x2F;O。</p><p>磁盘架构：</p><p>1.System Tablespace:系统表空间是更改缓冲区的存储区域。如果表是在系统表空间而不是每个表文件或通用表空间中创建的，它也可能包含裹和索引数据。(在MySQL5.x版本中还包含InnoDB数据字典,undolog等)</p><p>2.File-Per-Table Tablespaces:每个表的文件表空间包含单个InnoDB表的数据和索引，并存储在文件系统上的单个数据文件中。</p><p>3.General Tablespaces:通用表空间，需要通过CREATE TABLESPACE 语法创建通用表空间，在创建表时，可以指定该表空间。</p><p>4.Undo Tablespaces:撇销表空间，MyS5QL实例在初始化时会自动创建两个默认的undo表空问(初始大小16M),用于存储undo log日志。</p><p>5.Temporary Tablespaces: InnoDB使用会话临时表空问和全局临时表空间。存储用户创建的临时表等数据。</p><p>6.Doublewrite Buffer Files:双写缓冲区，innoDB引擎将数据页从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件中，便于系统异常时恢复数据。</p><p>7.Redo Log:重做日志，是用来实现事务的持久性。该日志文件由两部分组成:重做日志缓冲(redo log buffer）以及重做日志文件（redo log) ,前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都会存到该日志中,用于在刷新脏页到磁盘时,发生错误时,进行数据恢复使用。</p></li><li><p>后台线程</p></li></ul><ol><li>Master Thread:后台核心线程，负责调度其他线程，还负责将缓冲池中的数据刷新到磁盘中，保存数据的一致性，还包括脏页的刷新、合并插入缓存、undo页的回收。</li><li>IO Thread：负责回调AIO</li><li>purge Thread：回收事务已经提交了的undo log。</li><li>Page Cleaner Thread：协助Master刷新脏页到磁盘的线程，可以减轻Master Thread的工作压力，减少阻塞。</li></ol><h3 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h3><p>redo log  持久性</p><p>该日志文件由两部分组成:重做日志缓冲（redo log buffer）以及重做日志文件(redo log file) ，前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中,用于在刷新脏页到磁盘,发生错误时,进行数据恢复使用。</p><p>undo log  原子性</p><p>回滚日志，用于记录数据被修改前的信息，作用包含两个:提供回滚和MVCC(多版本并发控制)。</p><p>undo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</p><p>undo log 和redo log一起实现了一致性</p><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><ul><li>当前读</li></ul><p>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如:select …lock in share mode(共享锁)， select .. for update、update、insert、delete(排他锁)都是一种当前读。</p><ul><li>快照读</li></ul><p>简单的select(不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。</p><p>Read Committed:每次select，都生成一个快照读。</p><p>Repeatable Read:开启事务后第一个select语句才是快照读的地方。</p><p>Serializable:快照读会退化为当前读。</p><p>MVCC</p><p>全称Mult-version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为NySQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo log日志、readView。</p><p>隐藏字段</p><table><thead><tr><th>隐藏字段</th><th>含义</th></tr></thead><tbody><tr><td>DB_TRX_ID</td><td>最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务id。</td></tr><tr><td>DB_ROLL_PTR</td><td>回滚指针，指向这条记录的上一个版本，用于配合undo log，指向上一个版本</td></tr><tr><td>DB_ROW_ID</td><td>隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段</td></tr></tbody></table><ul><li>undo log</li></ul><p>回滚日志，在insert.update、delete的时候产生的便于数据回滚的日志。<br>当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。<br>而update、delete的时候，产生的undo log日志不仅在回滚时需要，在快照读时也需要，不会立即被删除。</p><ul><li>undo log版本链</li></ul><p>不同事务或相同事务对同一条记录进行修改，会导致该记录的undolog生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录。</p><ul><li>readview</li></ul><p>ReadView（读视图）是快照读SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的) id。</p><p>Readview中句含了四个核心字段:</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>m-ids</td><td>当前活跃的事务id集合</td></tr><tr><td>min_trx_id</td><td>最小互活跃事务id</td></tr><tr><td>max_trx_id</td><td>预分配事务id，当前最大事务id+1</td></tr><tr><td>creator_trx_id</td><td>Readvie创建者的事务ID</td></tr></tbody></table><p>版本链数据访问规则 (其中trx_id代表当前事务id)</p><ol><li>trx_id&#x3D;&#x3D;creator_trx_id 可以访问该版本</li><li>trx_id&lt;min_trx_id 可以访问该版本</li><li>trx_id&gt;max_trx_id  不可以访问该版本</li><li>min_trx_id&lt;&#x3D;trx_id&lt;&#x3D;max_trx_id 如果trx_id不在m_ids中是可以访问该版本的</li></ol><p>RC和RR</p><p>READ COMMITED:  在事务中每次执行快照时生成Readview</p><p>REPEATABLE  READ: 仅在事务第一次执行快照读时生成ReadView，后续复用该ReadView</p><p>MVCC和锁实现隔离性</p>]]></content>
      
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NVM和node常用命令</title>
      <link href="/2023/09/16/node-nvm-an-zhuang/"/>
      <url>/2023/09/16/node-nvm-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>本篇列出了NVM和node常用命令</p><hr><h3 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h3><p>—node管理工具</p><p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">Releases · coreybutler&#x2F;nvm-windows (github.com)</a></p><p>常用命令</p><pre class=" language-bash"><code class="language-bash">nvm <span class="token function">v</span> <span class="token comment" spellcheck="true">#查看版本</span>nvm list available <span class="token comment" spellcheck="true">#显示可下载版本的部分列表</span>nvm <span class="token function">install</span> 版本号 <span class="token comment" spellcheck="true">#安装指定版本node</span>nvm list或nvm <span class="token function">ls</span> <span class="token comment" spellcheck="true">#查看目前已经安装的版本</span>nvm use版本号 <span class="token comment" spellcheck="true">#使用指定版本的nodejs</span>nvm uninstall node版本号 <span class="token comment" spellcheck="true">#删除某node.js版本</span></code></pre><p>NVM配置镜像</p><pre class=" language-bash"><code class="language-bash">where nvm <span class="token comment" spellcheck="true">#查看nvm安装位置</span>找到settings.txt文件添加：node_mirror: https://npm.taobao.org/mirrors/node/npm_mirror: https://npm.taobao.org/mirrors/npm/</code></pre><h3 id="npm命令"><a href="#npm命令" class="headerlink" title="npm命令"></a>npm命令</h3><p>查看当前使用的镜像地址命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config get registry</code></pre><p>切换为淘宝镜像命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org</code></pre><p>切换回原镜像</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npmjs.org</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
